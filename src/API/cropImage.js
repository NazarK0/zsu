"use strict";const e=require("fs"),r=require("path"),i=require("sharp"),a=require("image-size"),s=require("imagemin"),t=require("imagemin-mozjpeg"),n=require("imagemin-pngquant"),o=require("imagemin-giflossy"),c=require("imagemin-svgo"),u=require("imagemin-webp"),{iconsFolderPath:l}=require("./constants/uploadPaths"),m=async(r,s,t)=>{let n;if(!e.existsSync(t))return console.error("cropImage API","file not found "+t),null;const o=await i(t);if(r>0&&s>0)n=await o.resize(r,s,{fit:"inside"}).toBuffer();else if(r>0){const{height:e}=a(t);n=await o.resize(r,e,{fit:"inside"}).toBuffer()}else if(s>0){const{width:e}=a(t);n=await o.resize(e,s,{fit:"inside"}).toBuffer()}else n=await o.toBuffer();return n},p=async i=>{const{base:a}=r.parse(i),s=await m(300,300,i);e.writeFileSync(r.join(l,a),s)},f=async(i,a)=>{const u={destination:a,plugins:[t({quality:60}),n({quality:[.6,.8]}),o({lossy:200,optimize:"3",colors:100}),c({plugins:[{removeViewBox:!1}]})]};if(!Array.isArray(i))throw new Error("source param is not array");try{const a=await s(i,u),t=[];if(a.length){const s=a.map(e=>r.parse(e.destinationPath).base);return a.forEach(e=>{t.push(p(e.destinationPath))}),await Promise.all(t),i.forEach(r=>e.unlinkSync(r)),s}return[]}catch(l){return console.error("compressImages API error"),e.writeFileSync(r.join(__dirname,"../../compressImagesAPI.log"),l.message),null}},g=async(i,a)=>{const u={destination:a,plugins:[t({quality:60}),n({quality:[.6,.8]}),o({lossy:200,optimize:"3",colors:100}),c({plugins:[{removeViewBox:!1}]})]};if(!Array.isArray(i))throw new Error("source param is not array");try{const a=await s(i,u),t=[];if(a.length){const s=a.map(e=>r.parse(e.destinationPath).base);return a.forEach(e=>{t.push(p(e.destinationPath))}),await Promise.all(t),i.forEach(r=>e.unlinkSync(r)),s}return[]}catch(l){return console.error("cannot store images "+i,`**${l}**`),null}};module.exports={cropImage:m,compressImages:f,compressImagesUtil:g,makeIcon:p};