"use strict";const e=require("fs"),i=require("path"),r=require("sharp"),a=require("image-size"),t=require("imagemin"),s=require("imagemin-mozjpeg"),n=require("imagemin-pngquant"),o=require("imagemin-giflossy"),u=require("imagemin-svgo"),c=require("imagemin-webp"),{iconsFolderPath:l}=require("./constants/uploadPaths"),m=async(i,t,s)=>{let n;if(!e.existsSync(s))return console.error("cropImage API","file not found "+s),null;const o=await r(s);if(i>0&&t>0)n=await o.resize(i,t,{fit:"inside"}).toBuffer();else if(i>0){const{height:e}=a(s);n=await o.resize(i,e,{fit:"inside"}).toBuffer()}else if(t>0){const{width:e}=a(s);n=await o.resize(e,t,{fit:"inside"}).toBuffer()}else n=await o.toBuffer();return n},f=async r=>{const{base:a}=i.parse(r),t=await m(300,300,r);e.writeFileSync(i.join(l,a),t)},g=async(r,a)=>{const l={destination:a,plugins:[s({quality:60}),n({quality:[.6,.8]}),o({lossy:200,optimize:"3",colors:100}),u({plugins:[{removeViewBox:!1}]}),c({quality:50})]};if(!Array.isArray(r))throw new Error("source param is not array");try{const a=await t(r,l),s=[];if(a.length){const t=a.map(e=>i.parse(e.destinationPath).base);return a.forEach(e=>{s.push(f(e.destinationPath))}),await Promise.all(s),r.forEach(i=>e.unlinkSync(i)),t}return[]}catch(m){return console.error("cannot store images "+r,`**${m}**`),null}};module.exports={cropImage:m,compressImages:g,makeIcon:f};